{"version":3,"sources":["Client/client.js","Components/CatImageShow.js","Components/CatImage2.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","status","error","Error","statusText","console","log","parseJSON","json","Client","getRandomImage","a","async","fetch","method","catImageArray","catImage","url","breed","ImageConainer","styled","div","Image","img","CatImageShow","props","src","alt","ButtonContainer","CatImage","state","catImageIndex","catImageObjs","client","catImageObjsArray","this","push","setState","catImageUrls","length","catObj","className","type","onClick","handlePreviousButton","handleRandomButton","handleNextButton","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b5e8afe.chunk.js","sourcesContent":["\nasync function getRandomImage() {\n  const response = await fetch('https://api.thecatapi.com/v1/images/search', {\n    method:'GET'\n  })\n  await checkStatus(response)\n  const catImageArray = await parseJSON(response)\n  const catImage = {'url':'', 'breed':{'name':'', 'life_span':''}}\n  if (catImageArray[0] && catImageArray[0].url){\n    catImage.url = catImageArray[0].url\n  }\n  if (catImageArray[0] && catImageArray[0].breed && catImageArray[0].breed['name']){\n    catImage.breed['name'] = catImageArray[0].breed['name']\n  }\n  if (catImageArray[0] && catImageArray[0].breed && catImageArray[0].breed['life_span']){\n    catImage.breed['life_span'] = catImageArray[0].breed['life_span']\n  }\n  return catImage\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst Client = { getRandomImage };\nexport default Client;\n","import React from 'react'\nimport styled from 'styled-components';\n\nconst ImageConainer = styled.div`\n  margin: auto;\n  width: 400px;\n  height: 400px;\n  line-height: 300px;\n  text-align: center;\n`\nconst Image = styled.img`\n  max-width:100%;\n  max-height:100%;\n  vertical-align: middle;\n`;\n\nfunction CatImageShow(props) {\n\n  return(\n    <ImageConainer>\n      <Image src={props.url} alt='cat picture'/>\n    </ImageConainer>\n  )\n}\n\nexport default CatImageShow\n","import React from 'react'\nimport styled from 'styled-components'\nimport CatImageShow from './CatImageShow'\nimport client from '../Client/client'\n\nconst ButtonContainer = styled.div`\n  margin: auto;\n  width: 400px;\n  text-align: center;\n`\n\n\nclass CatImage extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      catImageIndex:-1,\n      catImageObjs:[],\n    }\n  }\n\n  async componentDidMount() {\n    const catImage = await client.getRandomImage()\n    let catImageObjsArray = this.state.catImageObjs\n    catImageObjsArray.push(catImage)\n    this.setState({catImageIndex:this.state.catImageIndex + 1})\n    this.setState({catImageObjs:catImageObjsArray})\n  }\n\n  async handleRandomButton() {\n    const catImage = await client.getRandomImage()\n    let catImageObjsArray = this.state.catImageObjs\n    catImageObjsArray.push(catImage)\n    this.setState({catImageUrls:catImageObjsArray})\n    this.setState({catImageIndex:catImageObjsArray.length - 1})\n  }\n\n  handleNextButton() {\n    if (this.state.catImageIndex < this.state.catImageObjs.length-1){\n      this.setState({catImageIndex:this.state.catImageIndex + 1})\n    }\n  }\n\n  handlePreviousButton() {\n    if (this.state.catImageIndex > 0){\n      this.setState({catImageIndex:this.state.catImageIndex - 1})\n    }\n  }\n\n  render() {\n\n    let catObj = {\"url\":\"\", \"breed\":{'name':'', 'life_span':''}}\n    if (this.state.catImageObjs.length) {\n      catObj = this.state.catImageObjs[this.state.catImageIndex]\n    }\n    const breedName = catObj.breed['name']\n    return(\n        <div className='container'>\n          <div className='row'>\n            <div className='col'>\n              <CatImageShow url={catObj.url}/>\n            </div>\n          </div>\n          <div className='row'>\n            <div className='col'>\n              <div className='breed_name'>\n                BreedName: {catObj.breed['name']}\n              </div>\n              <div className='life_span'>\n                Life Span: {catObj.breed['life_span']}\n              </div>\n              <div className='image_url'>\n                Image Url: {catObj.url}\n              </div>\n              <ButtonContainer className='row'>\n                <button type=\"button\" className=\"col btn btn-secondary\" onClick={() => this.handlePreviousButton()}>Previous</button>\n                <div className='col-2'/>\n                <button type=\"button\" className=\"col btn btn-primary\" onClick={() => this.handleRandomButton()}>Random</button>\n                <div className='col-2'/>\n                <button type=\"button\" className=\"col btn btn-secondary\" onClick={() => this.handleNextButton()}>Next</button>\n              </ButtonContainer>\n            </div>\n          </div>\n        </div>\n\n    )\n  }\n}\n\nexport default CatImage\n","import React, {useState, useEffect} from 'react';\nimport client from './Client/client'\nimport CatImage from './Components/CatImage2'\nimport './Styles/App.scss';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <CatImage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './Styles/bootstrap-overide.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}